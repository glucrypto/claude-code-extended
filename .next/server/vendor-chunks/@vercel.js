"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@vercel";
exports.ids = ["vendor-chunks/@vercel"];
exports.modules = {

/***/ "(rsc)/./node_modules/@vercel/mcp-adapter/dist/chunk-FF57VHLH.mjs":
/*!******************************************************************!*\
  !*** ./node_modules/@vercel/mcp-adapter/dist/chunk-FF57VHLH.mjs ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   __async: () => (/* binding */ __async),\n/* harmony export */   __commonJS: () => (/* binding */ __commonJS),\n/* harmony export */   __objRest: () => (/* binding */ __objRest),\n/* harmony export */   __spreadProps: () => (/* binding */ __spreadProps),\n/* harmony export */   __spreadValues: () => (/* binding */ __spreadValues)\n/* harmony export */ });\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nvar __objRest = (source, exclude) => {\n  var target = {};\n  for (var prop in source)\n    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)\n      target[prop] = source[prop];\n  if (source != null && __getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(source)) {\n      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))\n        target[prop] = source[prop];\n    }\n  return target;\n};\nvar __commonJS = (cb, mod) => function __require() {\n  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;\n};\nvar __async = (__this, __arguments, generator) => {\n  return new Promise((resolve, reject) => {\n    var fulfilled = (value) => {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var rejected = (value) => {\n      try {\n        step(generator.throw(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);\n    step((generator = generator.apply(__this, __arguments)).next());\n  });\n};\n\n\n//# sourceMappingURL=out.js.map\n//# sourceMappingURL=chunk-FF57VHLH.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHZlcmNlbC9tY3AtYWRhcHRlci9kaXN0L2NodW5rLUZGNTdWSExILm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEVBQThFLDZEQUE2RDtBQUMzSTtBQUNBLCtCQUErQjtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkRBQTJELGFBQWE7QUFDeEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUV5RTtBQUN6RTtBQUNBIiwic291cmNlcyI6WyIvaG9tZS9nbHUvUHJvamVjdHMvYWxsL2NsYXVkZS1leHQvbm9kZV9tb2R1bGVzL0B2ZXJjZWwvbWNwLWFkYXB0ZXIvZGlzdC9jaHVuay1GRjU3VkhMSC5tanMiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2RlZlByb3BzID0gT2JqZWN0LmRlZmluZVByb3BlcnRpZXM7XG52YXIgX19nZXRPd25Qcm9wRGVzY3MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycztcbnZhciBfX2dldE93blByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIF9fZ2V0T3duUHJvcFN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xudmFyIF9faGFzT3duUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgX19wcm9wSXNFbnVtID0gT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcbnZhciBfX2RlZk5vcm1hbFByb3AgPSAob2JqLCBrZXksIHZhbHVlKSA9PiBrZXkgaW4gb2JqID8gX19kZWZQcm9wKG9iaiwga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUsIHZhbHVlIH0pIDogb2JqW2tleV0gPSB2YWx1ZTtcbnZhciBfX3NwcmVhZFZhbHVlcyA9IChhLCBiKSA9PiB7XG4gIGZvciAodmFyIHByb3AgaW4gYiB8fCAoYiA9IHt9KSlcbiAgICBpZiAoX19oYXNPd25Qcm9wLmNhbGwoYiwgcHJvcCkpXG4gICAgICBfX2RlZk5vcm1hbFByb3AoYSwgcHJvcCwgYltwcm9wXSk7XG4gIGlmIChfX2dldE93blByb3BTeW1ib2xzKVxuICAgIGZvciAodmFyIHByb3Agb2YgX19nZXRPd25Qcm9wU3ltYm9scyhiKSkge1xuICAgICAgaWYgKF9fcHJvcElzRW51bS5jYWxsKGIsIHByb3ApKVxuICAgICAgICBfX2RlZk5vcm1hbFByb3AoYSwgcHJvcCwgYltwcm9wXSk7XG4gICAgfVxuICByZXR1cm4gYTtcbn07XG52YXIgX19zcHJlYWRQcm9wcyA9IChhLCBiKSA9PiBfX2RlZlByb3BzKGEsIF9fZ2V0T3duUHJvcERlc2NzKGIpKTtcbnZhciBfX29ialJlc3QgPSAoc291cmNlLCBleGNsdWRlKSA9PiB7XG4gIHZhciB0YXJnZXQgPSB7fTtcbiAgZm9yICh2YXIgcHJvcCBpbiBzb3VyY2UpXG4gICAgaWYgKF9faGFzT3duUHJvcC5jYWxsKHNvdXJjZSwgcHJvcCkgJiYgZXhjbHVkZS5pbmRleE9mKHByb3ApIDwgMClcbiAgICAgIHRhcmdldFtwcm9wXSA9IHNvdXJjZVtwcm9wXTtcbiAgaWYgKHNvdXJjZSAhPSBudWxsICYmIF9fZ2V0T3duUHJvcFN5bWJvbHMpXG4gICAgZm9yICh2YXIgcHJvcCBvZiBfX2dldE93blByb3BTeW1ib2xzKHNvdXJjZSkpIHtcbiAgICAgIGlmIChleGNsdWRlLmluZGV4T2YocHJvcCkgPCAwICYmIF9fcHJvcElzRW51bS5jYWxsKHNvdXJjZSwgcHJvcCkpXG4gICAgICAgIHRhcmdldFtwcm9wXSA9IHNvdXJjZVtwcm9wXTtcbiAgICB9XG4gIHJldHVybiB0YXJnZXQ7XG59O1xudmFyIF9fY29tbW9uSlMgPSAoY2IsIG1vZCkgPT4gZnVuY3Rpb24gX19yZXF1aXJlKCkge1xuICByZXR1cm4gbW9kIHx8ICgwLCBjYltfX2dldE93blByb3BOYW1lcyhjYilbMF1dKSgobW9kID0geyBleHBvcnRzOiB7fSB9KS5leHBvcnRzLCBtb2QpLCBtb2QuZXhwb3J0cztcbn07XG52YXIgX19hc3luYyA9IChfX3RoaXMsIF9fYXJndW1lbnRzLCBnZW5lcmF0b3IpID0+IHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICB2YXIgZnVsZmlsbGVkID0gKHZhbHVlKSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJlamVjdChlKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHZhciByZWplY3RlZCA9ICh2YWx1ZSkgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgc3RlcChnZW5lcmF0b3IudGhyb3codmFsdWUpKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgfVxuICAgIH07XG4gICAgdmFyIHN0ZXAgPSAoeCkgPT4geC5kb25lID8gcmVzb2x2ZSh4LnZhbHVlKSA6IFByb21pc2UucmVzb2x2ZSh4LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpO1xuICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseShfX3RoaXMsIF9fYXJndW1lbnRzKSkubmV4dCgpKTtcbiAgfSk7XG59O1xuXG5leHBvcnQgeyBfX2FzeW5jLCBfX2NvbW1vbkpTLCBfX29ialJlc3QsIF9fc3ByZWFkUHJvcHMsIF9fc3ByZWFkVmFsdWVzIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1vdXQuanMubWFwXG4vLyMgc291cmNlTWFwcGluZ1VSTD1jaHVuay1GRjU3VkhMSC5tanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@vercel/mcp-adapter/dist/chunk-FF57VHLH.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@vercel/mcp-adapter/dist/chunk-FGS6UOXD.mjs":
/*!******************************************************************!*\
  !*** ./node_modules/@vercel/mcp-adapter/dist/chunk-FGS6UOXD.mjs ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createMcpRouteHandler: () => (/* binding */ createMcpRouteHandler),\n/* harmony export */   withAuthContext: () => (/* binding */ withAuthContext)\n/* harmony export */ });\n/* harmony import */ var _chunk_FF57VHLH_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunk-FF57VHLH.mjs */ \"(rsc)/./node_modules/@vercel/mcp-adapter/dist/chunk-FF57VHLH.mjs\");\n/* harmony import */ var _modelcontextprotocol_sdk_server_mcp_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @modelcontextprotocol/sdk/server/mcp.js */ \"(rsc)/./node_modules/@modelcontextprotocol/sdk/dist/esm/server/mcp.js\");\n/* harmony import */ var _modelcontextprotocol_sdk_server_sse_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @modelcontextprotocol/sdk/server/sse.js */ \"(rsc)/./node_modules/@modelcontextprotocol/sdk/dist/esm/server/sse.js\");\n/* harmony import */ var http__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! http */ \"http\");\n/* harmony import */ var redis__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! redis */ \"(rsc)/./node_modules/redis/dist/index.js\");\n/* harmony import */ var net__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! net */ \"net\");\n/* harmony import */ var stream__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! stream */ \"stream\");\n/* harmony import */ var _modelcontextprotocol_sdk_server_streamableHttp_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @modelcontextprotocol/sdk/server/streamableHttp.js */ \"(rsc)/./node_modules/@modelcontextprotocol/sdk/dist/esm/server/streamableHttp.js\");\n/* harmony import */ var assert__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! assert */ \"assert\");\n/* harmony import */ var async_hooks__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! async_hooks */ \"async_hooks\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! events */ \"events\");\n\n\n\n\n\n\n\n\n\n\n\n\n// src/lib/log-helper.ts\nfunction createEvent(event) {\n  return (0,_chunk_FF57VHLH_mjs__WEBPACK_IMPORTED_MODULE_0__.__spreadProps)((0,_chunk_FF57VHLH_mjs__WEBPACK_IMPORTED_MODULE_0__.__spreadValues)({}, event), {\n    timestamp: Date.now()\n  });\n}\n\n// src/lib/event-emitter.ts\nvar EventEmittingResponse = class extends http__WEBPACK_IMPORTED_MODULE_3__.ServerResponse {\n  constructor(req, onEvent, sessionId) {\n    super(req);\n    this.onEvent = onEvent;\n    this.sessionId = sessionId;\n    this.requestId = crypto.randomUUID();\n    this.startTime = Date.now();\n  }\n  emitEvent(event) {\n    if (this.onEvent) {\n      this.onEvent(\n        createEvent((0,_chunk_FF57VHLH_mjs__WEBPACK_IMPORTED_MODULE_0__.__spreadProps)((0,_chunk_FF57VHLH_mjs__WEBPACK_IMPORTED_MODULE_0__.__spreadValues)({}, event), {\n          sessionId: this.sessionId,\n          requestId: this.requestId\n        }))\n      );\n    }\n  }\n  startSession(transport, clientInfo) {\n    this.emitEvent({\n      type: \"SESSION_STARTED\",\n      transport,\n      clientInfo\n    });\n  }\n  endSession(transport) {\n    this.emitEvent({\n      type: \"SESSION_ENDED\",\n      transport\n    });\n  }\n  requestReceived(method, parameters) {\n    this.emitEvent({\n      type: \"REQUEST_RECEIVED\",\n      method,\n      parameters,\n      status: \"success\"\n    });\n  }\n  requestCompleted(method, result, error) {\n    this.emitEvent({\n      type: \"REQUEST_COMPLETED\",\n      method,\n      result,\n      duration: Date.now() - this.startTime,\n      status: error ? \"error\" : \"success\"\n    });\n    if (error) {\n      this.error(error, `Error executing request ${method}`, \"request\");\n    }\n  }\n  error(error, context, source = \"system\", severity = \"error\") {\n    this.emitEvent({\n      type: \"ERROR\",\n      error,\n      context,\n      source,\n      severity\n    });\n  }\n  end(chunk, encoding, cb) {\n    let finalChunk = chunk;\n    let finalEncoding = encoding;\n    let finalCallback = cb;\n    if (typeof chunk === \"function\") {\n      finalCallback = chunk;\n      finalChunk = void 0;\n      finalEncoding = void 0;\n    } else if (typeof encoding === \"function\") {\n      finalCallback = encoding;\n      finalEncoding = void 0;\n    }\n    return super.end(\n      finalChunk,\n      finalEncoding,\n      finalCallback\n    );\n  }\n};\nvar authContext = new async_hooks__WEBPACK_IMPORTED_MODULE_9__.AsyncLocalStorage();\nfunction getAuthContext() {\n  return authContext.getStore();\n}\nfunction withAuthContext(authInfo, callback) {\n  return authContext.run(authInfo, callback);\n}\n\n// src/next/mcp-api-handler.ts\nfunction createLogger(verboseLogs = false) {\n  return {\n    log: (...args) => {\n      if (verboseLogs)\n        console.log(...args);\n    },\n    error: (...args) => {\n      if (verboseLogs)\n        console.error(...args);\n    },\n    warn: (...args) => {\n      if (verboseLogs)\n        console.warn(...args);\n    },\n    info: (...args) => {\n      if (verboseLogs)\n        console.info(...args);\n    },\n    debug: (...args) => {\n      if (verboseLogs)\n        console.debug(...args);\n    }\n  };\n}\nfunction deriveEndpointsFromBasePath(basePath) {\n  const normalizedBasePath = basePath.replace(/\\/$/, \"\");\n  return {\n    streamableHttpEndpoint: `${normalizedBasePath}/mcp`,\n    sseEndpoint: `${normalizedBasePath}/sse`,\n    sseMessageEndpoint: `${normalizedBasePath}/message`\n  };\n}\nfunction calculateEndpoints({\n  basePath,\n  streamableHttpEndpoint = \"/mcp\",\n  sseEndpoint = \"/sse\",\n  sseMessageEndpoint = \"/message\"\n}) {\n  const {\n    streamableHttpEndpoint: fullStreamableHttpEndpoint,\n    sseEndpoint: fullSseEndpoint,\n    sseMessageEndpoint: fullSseMessageEndpoint\n  } = basePath != null ? deriveEndpointsFromBasePath(basePath) : {\n    streamableHttpEndpoint,\n    sseEndpoint,\n    sseMessageEndpoint\n  };\n  return {\n    streamableHttpEndpoint: fullStreamableHttpEndpoint,\n    sseEndpoint: fullSseEndpoint,\n    sseMessageEndpoint: fullSseMessageEndpoint\n  };\n}\nvar redisPublisher;\nvar redis;\nfunction initializeRedis(_0) {\n  return (0,_chunk_FF57VHLH_mjs__WEBPACK_IMPORTED_MODULE_0__.__async)(this, arguments, function* ({\n    redisUrl,\n    logger\n  }) {\n    if (redis && redisPublisher) {\n      return { redis, redisPublisher };\n    }\n    if (!redisUrl) {\n      throw new Error(\"redisUrl is required\");\n    }\n    redis = (0,redis__WEBPACK_IMPORTED_MODULE_4__.createClient)({\n      url: redisUrl\n    });\n    redisPublisher = (0,redis__WEBPACK_IMPORTED_MODULE_4__.createClient)({\n      url: redisUrl\n    });\n    redis.on(\"error\", (err) => {\n      logger.error(\"Redis error\", err);\n    });\n    redisPublisher.on(\"error\", (err) => {\n      logger.error(\"Redis error\", err);\n    });\n    yield Promise.all([redis.connect(), redisPublisher.connect()]);\n    return { redis, redisPublisher };\n  });\n}\nfunction initializeMcpApiHandler(initializeServer, serverOptions = {}, config = {\n  redisUrl: process.env.REDIS_URL || process.env.KV_URL,\n  streamableHttpEndpoint: \"/mcp\",\n  sseEndpoint: \"/sse\",\n  sseMessageEndpoint: \"/message\",\n  basePath: \"\",\n  maxDuration: 60,\n  verboseLogs: false,\n  disableSse: false\n}) {\n  const {\n    redisUrl,\n    basePath,\n    streamableHttpEndpoint: explicitStreamableHttpEndpoint,\n    sseEndpoint: explicitSseEndpoint,\n    sseMessageEndpoint: explicitSseMessageEndpoint,\n    maxDuration,\n    verboseLogs,\n    disableSse\n  } = config;\n  const _a = serverOptions, {\n    serverInfo = {\n      name: \"mcp-typescript server on vercel\",\n      version: \"0.1.0\"\n    }\n  } = _a, mcpServerOptions = (0,_chunk_FF57VHLH_mjs__WEBPACK_IMPORTED_MODULE_0__.__objRest)(_a, [\n    \"serverInfo\"\n  ]);\n  const { streamableHttpEndpoint, sseEndpoint, sseMessageEndpoint } = calculateEndpoints({\n    basePath,\n    streamableHttpEndpoint: explicitStreamableHttpEndpoint,\n    sseEndpoint: explicitSseEndpoint,\n    sseMessageEndpoint: explicitSseMessageEndpoint\n  });\n  const logger = createLogger(verboseLogs);\n  let servers = [];\n  let statelessServer;\n  const statelessTransport = new _modelcontextprotocol_sdk_server_streamableHttp_js__WEBPACK_IMPORTED_MODULE_7__.StreamableHTTPServerTransport({\n    sessionIdGenerator: void 0\n  });\n  return function mcpApiHandler(req, res) {\n    return (0,_chunk_FF57VHLH_mjs__WEBPACK_IMPORTED_MODULE_0__.__async)(this, null, function* () {\n      var _a2, _b, _c;\n      const url = new URL(req.url || \"\", \"https://example.com\");\n      if (url.pathname === streamableHttpEndpoint) {\n        if (req.method === \"GET\") {\n          logger.log(\"Received GET MCP request\");\n          res.writeHead(405).end(\n            JSON.stringify({\n              jsonrpc: \"2.0\",\n              error: {\n                code: -32e3,\n                message: \"Method not allowed.\"\n              },\n              id: null\n            })\n          );\n          return;\n        }\n        if (req.method === \"DELETE\") {\n          logger.log(\"Received DELETE MCP request\");\n          res.writeHead(405).end(\n            JSON.stringify({\n              jsonrpc: \"2.0\",\n              error: {\n                code: -32e3,\n                message: \"Method not allowed.\"\n              },\n              id: null\n            })\n          );\n          return;\n        }\n        if (req.method === \"POST\") {\n          const eventRes = new EventEmittingResponse(\n            createFakeIncomingMessage(),\n            config.onEvent\n          );\n          if (!statelessServer) {\n            statelessServer = new _modelcontextprotocol_sdk_server_mcp_js__WEBPACK_IMPORTED_MODULE_1__.McpServer(serverInfo, mcpServerOptions);\n            yield initializeServer(statelessServer);\n            yield statelessServer.connect(statelessTransport);\n          }\n          let bodyContent;\n          const contentType = req.headers.get(\"content-type\") || \"\";\n          if (contentType.includes(\"application/json\")) {\n            bodyContent = yield req.json();\n          } else {\n            bodyContent = yield req.text();\n          }\n          const incomingRequest = createFakeIncomingMessage({\n            method: req.method,\n            url: req.url,\n            headers: Object.fromEntries(req.headers),\n            body: bodyContent,\n            auth: req.auth\n            // Use the auth info that should already be set by withMcpAuth\n          });\n          const wrappedRes = new EventEmittingResponse(\n            incomingRequest,\n            config.onEvent\n          );\n          Object.assign(wrappedRes, res);\n          try {\n            yield statelessTransport.handleRequest(incomingRequest, wrappedRes);\n            if (typeof bodyContent === \"object\" && bodyContent && \"method\" in bodyContent) {\n              eventRes.requestCompleted(\n                bodyContent.method,\n                bodyContent\n              );\n            }\n          } catch (error) {\n            if (typeof bodyContent === \"object\" && bodyContent && \"method\" in bodyContent) {\n              eventRes.requestCompleted(\n                bodyContent.method,\n                void 0,\n                error instanceof Error ? error : String(error)\n              );\n            }\n            throw error;\n          }\n        }\n      } else if (url.pathname === sseEndpoint) {\n        let logInContext2 = function(severity, ...messages) {\n          logs.push({\n            type: severity,\n            messages\n          });\n        };\n        if (disableSse) {\n          res.statusCode = 404;\n          res.end(\"Not found\");\n          return;\n        }\n        if (req.method !== \"GET\") {\n          logger.log(`Rejected SSE connection with method ${req.method}`);\n          res.writeHead(405, { \"Content-Type\": \"text/plain\" }).end(\"Method Not Allowed\");\n          return;\n        }\n        const acceptHeader = req.headers.get(\"accept\") || req.headers.get(\"Accept\");\n        if (acceptHeader && !acceptHeader.includes(\"text/event-stream\") && !acceptHeader.includes(\"*/*\") && !acceptHeader.includes(\"text/*\")) {\n          logger.log(\n            `Rejected SSE connection with incompatible Accept header: ${acceptHeader}`\n          );\n          res.writeHead(406, { \"Content-Type\": \"text/plain\" }).end(\"Not Acceptable\");\n          return;\n        }\n        const { redis: redis2, redisPublisher: redisPublisher2 } = yield initializeRedis({\n          redisUrl,\n          logger\n        });\n        logger.log(\"Got new SSE connection\");\n        assert__WEBPACK_IMPORTED_MODULE_8__(sseMessageEndpoint, \"sseMessageEndpoint is required\");\n        const transport = new _modelcontextprotocol_sdk_server_sse_js__WEBPACK_IMPORTED_MODULE_2__.SSEServerTransport(sseMessageEndpoint, res);\n        const sessionId = transport.sessionId;\n        const eventRes = new EventEmittingResponse(\n          createFakeIncomingMessage(),\n          config.onEvent,\n          sessionId\n        );\n        eventRes.startSession(\"SSE\", {\n          userAgent: (_a2 = req.headers.get(\"user-agent\")) != null ? _a2 : void 0,\n          ip: (_c = (_b = req.headers.get(\"x-forwarded-for\")) != null ? _b : req.headers.get(\"x-real-ip\")) != null ? _c : void 0\n        });\n        const server = new _modelcontextprotocol_sdk_server_mcp_js__WEBPACK_IMPORTED_MODULE_1__.McpServer(serverInfo, serverOptions);\n        yield initializeServer(server);\n        servers.push(server);\n        server.server.onclose = () => {\n          logger.log(\"SSE connection closed\");\n          eventRes.endSession(\"SSE\");\n          servers = servers.filter((s) => s !== server);\n        };\n        let logs = [];\n        const handleMessage = (message) => (0,_chunk_FF57VHLH_mjs__WEBPACK_IMPORTED_MODULE_0__.__async)(this, null, function* () {\n          logger.log(\"Received message from Redis\", message);\n          logInContext2(\"log\", \"Received message from Redis\", message);\n          const request = JSON.parse(message);\n          const req2 = createFakeIncomingMessage({\n            method: request.method,\n            url: request.url,\n            headers: request.headers,\n            body: request.body\n          });\n          const syntheticRes = new EventEmittingResponse(\n            req2,\n            config.onEvent,\n            sessionId\n          );\n          let status = 100;\n          let body = \"\";\n          syntheticRes.writeHead = (statusCode) => {\n            status = statusCode;\n            return syntheticRes;\n          };\n          syntheticRes.end = (b) => {\n            body = b;\n            return syntheticRes;\n          };\n          try {\n            yield transport.handlePostMessage(req2, syntheticRes);\n            if (typeof request.body === \"object\" && request.body && \"method\" in request.body) {\n              try {\n                const result = JSON.parse(body);\n                eventRes.requestCompleted(request.body.method, result);\n              } catch (e) {\n                eventRes.requestCompleted(request.body.method, body);\n              }\n            }\n          } catch (error) {\n            eventRes.error(\n              error instanceof Error ? error : String(error),\n              \"Error handling SSE message\",\n              \"session\"\n            );\n            throw error;\n          }\n          yield redisPublisher2.publish(\n            `responses:${sessionId}:${request.requestId}`,\n            JSON.stringify({\n              status,\n              body\n            })\n          );\n          if (status >= 200 && status < 300) {\n            logInContext2(\n              \"log\",\n              `Request ${sessionId}:${request.requestId} succeeded: ${body}`\n            );\n          } else {\n            logInContext2(\n              \"error\",\n              `Message for ${sessionId}:${request.requestId} failed with status ${status}: ${body}`\n            );\n            eventRes.error(\n              `Request failed with status ${status}`,\n              body,\n              \"session\"\n            );\n          }\n        });\n        const interval = setInterval(() => {\n          for (const log of logs) {\n            logger[log.type](...log.messages);\n          }\n          logs = [];\n        }, 100);\n        yield redis2.subscribe(`requests:${sessionId}`, handleMessage);\n        logger.log(`Subscribed to requests:${sessionId}`);\n        let timeout;\n        let resolveTimeout;\n        const waitPromise = new Promise((resolve) => {\n          resolveTimeout = resolve;\n          timeout = setTimeout(() => {\n            resolve(\"max duration reached\");\n          }, (maxDuration != null ? maxDuration : 60) * 1e3);\n        });\n        function cleanup() {\n          return (0,_chunk_FF57VHLH_mjs__WEBPACK_IMPORTED_MODULE_0__.__async)(this, null, function* () {\n            clearTimeout(timeout);\n            clearInterval(interval);\n            yield redis2.unsubscribe(`requests:${sessionId}`, handleMessage);\n            logger.log(\"Done\");\n            res.statusCode = 200;\n            res.end();\n          });\n        }\n        req.signal.addEventListener(\n          \"abort\",\n          () => resolveTimeout(\"client hang up\")\n        );\n        yield server.connect(transport);\n        const closeReason = yield waitPromise;\n        logger.log(closeReason);\n        yield cleanup();\n      } else if (url.pathname === sseMessageEndpoint) {\n        if (disableSse) {\n          res.statusCode = 404;\n          res.end(\"Not found\");\n          return;\n        }\n        const { redis: redis2, redisPublisher: redisPublisher2 } = yield initializeRedis({\n          redisUrl,\n          logger\n        });\n        logger.log(\"Received message\");\n        const body = yield req.text();\n        let parsedBody;\n        try {\n          parsedBody = JSON.parse(body);\n        } catch (e) {\n          parsedBody = body;\n        }\n        const sessionId = url.searchParams.get(\"sessionId\") || \"\";\n        if (!sessionId) {\n          res.statusCode = 400;\n          res.end(\"No sessionId provided\");\n          return;\n        }\n        const requestId = crypto.randomUUID();\n        const serializedRequest = {\n          requestId,\n          url: req.url || \"\",\n          method: req.method || \"\",\n          body: parsedBody,\n          headers: Object.fromEntries(req.headers.entries())\n        };\n        let timeout;\n        let hasResponded = false;\n        const sendResponse = (status, body2) => {\n          if (!hasResponded) {\n            hasResponded = true;\n            clearTimeout(timeout);\n            res.statusCode = status;\n            res.end(body2);\n          }\n        };\n        yield redis2.subscribe(\n          `responses:${sessionId}:${requestId}`,\n          (message) => {\n            try {\n              const response = JSON.parse(message);\n              sendResponse(response.status, response.body);\n            } catch (error) {\n              logger.error(\"Failed to parse response message:\", error);\n              sendResponse(500, \"Internal server error\");\n            }\n          }\n        );\n        yield redisPublisher2.publish(\n          `requests:${sessionId}`,\n          JSON.stringify(serializedRequest)\n        );\n        logger.log(`Published requests:${sessionId}`, serializedRequest);\n        timeout = setTimeout(() => (0,_chunk_FF57VHLH_mjs__WEBPACK_IMPORTED_MODULE_0__.__async)(this, null, function* () {\n          yield redis2.unsubscribe(`responses:${sessionId}:${requestId}`);\n          sendResponse(408, \"Request timed out\");\n        }), 10 * 1e3);\n        res.on(\"close\", () => (0,_chunk_FF57VHLH_mjs__WEBPACK_IMPORTED_MODULE_0__.__async)(this, null, function* () {\n          hasResponded = true;\n          clearTimeout(timeout);\n          yield redis2.unsubscribe(`responses:${sessionId}:${requestId}`);\n        }));\n      } else {\n        res.statusCode = 404;\n        res.end(\"Not found\");\n      }\n    });\n  };\n}\nfunction createFakeIncomingMessage(options = {}) {\n  const {\n    method = \"GET\",\n    url = \"/\",\n    headers = {},\n    body = null,\n    socket = new net__WEBPACK_IMPORTED_MODULE_5__.Socket()\n  } = options;\n  const readable = new stream__WEBPACK_IMPORTED_MODULE_6__.Readable();\n  readable._read = () => {\n  };\n  if (body) {\n    if (typeof body === \"string\") {\n      readable.push(body);\n    } else if (Buffer.isBuffer(body)) {\n      readable.push(body);\n    } else {\n      const bodyString = JSON.stringify(body);\n      readable.push(bodyString);\n    }\n    readable.push(null);\n  } else {\n    readable.push(null);\n  }\n  const req = new http__WEBPACK_IMPORTED_MODULE_3__.IncomingMessage(socket);\n  req.method = method;\n  req.url = url;\n  req.headers = headers;\n  const auth = options.auth || getAuthContext();\n  if (auth) {\n    req.auth = auth;\n  }\n  req.push = readable.push.bind(readable);\n  req.read = readable.read.bind(readable);\n  req.on = readable.on.bind(readable);\n  req.pipe = readable.pipe.bind(readable);\n  return req;\n}\nfunction createServerResponseAdapter(signal, fn) {\n  let writeHeadResolver;\n  const writeHeadPromise = new Promise((resolve) => {\n    writeHeadResolver = resolve;\n  });\n  return new Promise((resolve) => {\n    let controller;\n    let shouldClose = false;\n    let wroteHead = false;\n    let statusCode = 200;\n    let headers;\n    const writeHead = (code, headersArg) => {\n      if (typeof headersArg === \"string\") {\n        throw new Error(\"Status message of writeHead not supported\");\n      }\n      statusCode = code;\n      headers = headersArg;\n      wroteHead = true;\n      writeHeadResolver({\n        statusCode,\n        headers\n      });\n      return fakeServerResponse;\n    };\n    const bufferedData = [];\n    const write = (chunk, encoding) => {\n      if (encoding) {\n        throw new Error(\"Encoding not supported\");\n      }\n      if (chunk instanceof Buffer) {\n        throw new Error(\"Buffer not supported\");\n      }\n      if (!wroteHead) {\n        writeHead(statusCode, headers);\n      }\n      if (!controller) {\n        bufferedData.push(new TextEncoder().encode(chunk));\n        return true;\n      }\n      controller.enqueue(new TextEncoder().encode(chunk));\n      return true;\n    };\n    const eventEmitter = new events__WEBPACK_IMPORTED_MODULE_10__.EventEmitter();\n    const fakeServerResponse = {\n      writeHead,\n      write,\n      end: (data) => {\n        if (data) {\n          write(data);\n        }\n        if (!controller) {\n          shouldClose = true;\n          return fakeServerResponse;\n        }\n        try {\n          controller.close();\n        } catch (e) {\n        }\n        return fakeServerResponse;\n      },\n      on: (event, listener) => {\n        eventEmitter.on(event, listener);\n        return fakeServerResponse;\n      },\n      get statusCode() {\n        return statusCode;\n      },\n      set statusCode(code) {\n        statusCode = code;\n        if (wroteHead) {\n          writeHeadResolver({\n            statusCode,\n            headers\n          });\n        }\n      }\n    };\n    signal.addEventListener(\"abort\", () => {\n      eventEmitter.emit(\"close\");\n    });\n    void fn(fakeServerResponse);\n    void (() => (0,_chunk_FF57VHLH_mjs__WEBPACK_IMPORTED_MODULE_0__.__async)(this, null, function* () {\n      const head = yield writeHeadPromise;\n      const response = new Response(\n        new ReadableStream({\n          start(c) {\n            controller = c;\n            for (const chunk of bufferedData) {\n              controller.enqueue(chunk);\n            }\n            if (shouldClose) {\n              controller.close();\n            }\n          }\n        }),\n        {\n          status: head.statusCode,\n          headers: head.headers\n        }\n      );\n      resolve(response);\n    }))();\n  });\n}\n\n// src/next/index.ts\nfunction createMcpRouteHandler(initializeServer, serverOptions, config) {\n  const mcpHandler = initializeMcpApiHandler(\n    initializeServer,\n    serverOptions,\n    config\n  );\n  return (request) => {\n    return createServerResponseAdapter(request.signal, (res) => {\n      mcpHandler(request, res);\n    });\n  };\n}\n\n\n//# sourceMappingURL=out.js.map\n//# sourceMappingURL=chunk-FGS6UOXD.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@vercel/mcp-adapter/dist/chunk-FGS6UOXD.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@vercel/mcp-adapter/dist/index.mjs":
/*!*********************************************************!*\
  !*** ./node_modules/@vercel/mcp-adapter/dist/index.mjs ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createMcpHandler: () => (/* reexport safe */ _chunk_FGS6UOXD_mjs__WEBPACK_IMPORTED_MODULE_0__.createMcpRouteHandler),\n/* harmony export */   experimental_withMcpAuth: () => (/* binding */ withMcpAuth)\n/* harmony export */ });\n/* harmony import */ var _chunk_FGS6UOXD_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunk-FGS6UOXD.mjs */ \"(rsc)/./node_modules/@vercel/mcp-adapter/dist/chunk-FGS6UOXD.mjs\");\n/* harmony import */ var _chunk_FF57VHLH_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chunk-FF57VHLH.mjs */ \"(rsc)/./node_modules/@vercel/mcp-adapter/dist/chunk-FF57VHLH.mjs\");\n/* harmony import */ var _modelcontextprotocol_sdk_server_auth_errors_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @modelcontextprotocol/sdk/server/auth/errors.js */ \"(rsc)/./node_modules/@modelcontextprotocol/sdk/dist/esm/server/auth/errors.js\");\n\n\n\n\n\nfunction withMcpAuth(handler, verifyToken, {\n  required = false,\n  resourceMetadataPath = \"/.well-known/oauth-protected-resource\",\n  requiredScopes\n} = {}) {\n  return (req) => (0,_chunk_FF57VHLH_mjs__WEBPACK_IMPORTED_MODULE_1__.__async)(this, null, function* () {\n    try {\n      const authHeader = req.headers.get(\"Authorization\");\n      const [type, token] = (authHeader == null ? void 0 : authHeader.split(\" \")) || [];\n      const bearerToken = (type == null ? void 0 : type.toLowerCase()) === \"bearer\" ? token : void 0;\n      const authInfo = yield verifyToken(req, bearerToken);\n      if (required && !authInfo) {\n        throw new _modelcontextprotocol_sdk_server_auth_errors_js__WEBPACK_IMPORTED_MODULE_2__.InvalidTokenError(\"No authorization provided\");\n      }\n      if (!authInfo) {\n        return handler(req);\n      }\n      if (requiredScopes == null ? void 0 : requiredScopes.length) {\n        const hasAllScopes = requiredScopes.every(\n          (scope) => authInfo.scopes.includes(scope)\n        );\n        if (!hasAllScopes) {\n          throw new _modelcontextprotocol_sdk_server_auth_errors_js__WEBPACK_IMPORTED_MODULE_2__.InsufficientScopeError(\"Insufficient scope\");\n        }\n      }\n      if (authInfo.expiresAt && authInfo.expiresAt < Date.now() / 1e3) {\n        throw new _modelcontextprotocol_sdk_server_auth_errors_js__WEBPACK_IMPORTED_MODULE_2__.InvalidTokenError(\"Token has expired\");\n      }\n      req.auth = authInfo;\n      return (0,_chunk_FGS6UOXD_mjs__WEBPACK_IMPORTED_MODULE_0__.withAuthContext)(authInfo, () => handler(req));\n    } catch (error) {\n      const origin = new URL(req.url).origin;\n      const resourceMetadataUrl = `${origin}${resourceMetadataPath}`;\n      if (error instanceof _modelcontextprotocol_sdk_server_auth_errors_js__WEBPACK_IMPORTED_MODULE_2__.InvalidTokenError) {\n        return new Response(JSON.stringify(error.toResponseObject()), {\n          status: 401,\n          headers: {\n            \"WWW-Authenticate\": `Bearer error=\"${error.errorCode}\", error_description=\"${error.message}\", resource_metadata=\"${resourceMetadataUrl}\"`,\n            \"Content-Type\": \"application/json\"\n          }\n        });\n      } else if (error instanceof _modelcontextprotocol_sdk_server_auth_errors_js__WEBPACK_IMPORTED_MODULE_2__.InsufficientScopeError) {\n        return new Response(JSON.stringify(error.toResponseObject()), {\n          status: 403,\n          headers: {\n            \"WWW-Authenticate\": `Bearer error=\"${error.errorCode}\", error_description=\"${error.message}\", resource_metadata=\"${resourceMetadataUrl}\"`,\n            \"Content-Type\": \"application/json\"\n          }\n        });\n      } else if (error instanceof _modelcontextprotocol_sdk_server_auth_errors_js__WEBPACK_IMPORTED_MODULE_2__.ServerError) {\n        return new Response(JSON.stringify(error.toResponseObject()), {\n          status: 500,\n          headers: {\n            \"Content-Type\": \"application/json\"\n          }\n        });\n      } else {\n        console.error(\"Unexpected error authenticating bearer token:\", error);\n        const serverError = new _modelcontextprotocol_sdk_server_auth_errors_js__WEBPACK_IMPORTED_MODULE_2__.ServerError(\"Internal Server Error\");\n        return new Response(JSON.stringify(serverError.toResponseObject()), {\n          status: 500,\n          headers: {\n            \"Content-Type\": \"application/json\"\n          }\n        });\n      }\n    }\n  });\n}\n\n\n//# sourceMappingURL=out.js.map\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHZlcmNlbC9tY3AtYWRhcHRlci9kaXN0L2luZGV4Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUF1RDtBQUMwQjtBQUNsQztBQUMwRTs7QUFFekg7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFLElBQUk7QUFDTixrQkFBa0IsNERBQU87QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLDhGQUFpQjtBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsbUdBQXNCO0FBQzFDO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQiw4RkFBaUI7QUFDbkM7QUFDQTtBQUNBLGFBQWEsb0VBQWU7QUFDNUIsTUFBTTtBQUNOO0FBQ0EscUNBQXFDLE9BQU8sRUFBRSxxQkFBcUI7QUFDbkUsMkJBQTJCLDhGQUFpQjtBQUM1QztBQUNBO0FBQ0E7QUFDQSxpREFBaUQsZ0JBQWdCLHdCQUF3QixjQUFjLHdCQUF3QixvQkFBb0I7QUFDbko7QUFDQTtBQUNBLFNBQVM7QUFDVCxRQUFRLDBCQUEwQixtR0FBc0I7QUFDeEQ7QUFDQTtBQUNBO0FBQ0EsaURBQWlELGdCQUFnQix3QkFBd0IsY0FBYyx3QkFBd0Isb0JBQW9CO0FBQ25KO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsUUFBUSwwQkFBMEIsd0ZBQVc7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxRQUFRO0FBQ1I7QUFDQSxnQ0FBZ0Msd0ZBQVc7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVtRDtBQUNuRDtBQUNBIiwic291cmNlcyI6WyIvaG9tZS9nbHUvUHJvamVjdHMvYWxsL2NsYXVkZS1leHQvbm9kZV9tb2R1bGVzL0B2ZXJjZWwvbWNwLWFkYXB0ZXIvZGlzdC9pbmRleC5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgd2l0aEF1dGhDb250ZXh0IH0gZnJvbSAnLi9jaHVuay1GR1M2VU9YRC5tanMnO1xuZXhwb3J0IHsgY3JlYXRlTWNwUm91dGVIYW5kbGVyIGFzIGNyZWF0ZU1jcEhhbmRsZXIgfSBmcm9tICcuL2NodW5rLUZHUzZVT1hELm1qcyc7XG5pbXBvcnQgeyBfX2FzeW5jIH0gZnJvbSAnLi9jaHVuay1GRjU3VkhMSC5tanMnO1xuaW1wb3J0IHsgSW52YWxpZFRva2VuRXJyb3IsIEluc3VmZmljaWVudFNjb3BlRXJyb3IsIFNlcnZlckVycm9yIH0gZnJvbSAnQG1vZGVsY29udGV4dHByb3RvY29sL3Nkay9zZXJ2ZXIvYXV0aC9lcnJvcnMuanMnO1xuXG5mdW5jdGlvbiB3aXRoTWNwQXV0aChoYW5kbGVyLCB2ZXJpZnlUb2tlbiwge1xuICByZXF1aXJlZCA9IGZhbHNlLFxuICByZXNvdXJjZU1ldGFkYXRhUGF0aCA9IFwiLy53ZWxsLWtub3duL29hdXRoLXByb3RlY3RlZC1yZXNvdXJjZVwiLFxuICByZXF1aXJlZFNjb3Blc1xufSA9IHt9KSB7XG4gIHJldHVybiAocmVxKSA9PiBfX2FzeW5jKHRoaXMsIG51bGwsIGZ1bmN0aW9uKiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGF1dGhIZWFkZXIgPSByZXEuaGVhZGVycy5nZXQoXCJBdXRob3JpemF0aW9uXCIpO1xuICAgICAgY29uc3QgW3R5cGUsIHRva2VuXSA9IChhdXRoSGVhZGVyID09IG51bGwgPyB2b2lkIDAgOiBhdXRoSGVhZGVyLnNwbGl0KFwiIFwiKSkgfHwgW107XG4gICAgICBjb25zdCBiZWFyZXJUb2tlbiA9ICh0eXBlID09IG51bGwgPyB2b2lkIDAgOiB0eXBlLnRvTG93ZXJDYXNlKCkpID09PSBcImJlYXJlclwiID8gdG9rZW4gOiB2b2lkIDA7XG4gICAgICBjb25zdCBhdXRoSW5mbyA9IHlpZWxkIHZlcmlmeVRva2VuKHJlcSwgYmVhcmVyVG9rZW4pO1xuICAgICAgaWYgKHJlcXVpcmVkICYmICFhdXRoSW5mbykge1xuICAgICAgICB0aHJvdyBuZXcgSW52YWxpZFRva2VuRXJyb3IoXCJObyBhdXRob3JpemF0aW9uIHByb3ZpZGVkXCIpO1xuICAgICAgfVxuICAgICAgaWYgKCFhdXRoSW5mbykge1xuICAgICAgICByZXR1cm4gaGFuZGxlcihyZXEpO1xuICAgICAgfVxuICAgICAgaWYgKHJlcXVpcmVkU2NvcGVzID09IG51bGwgPyB2b2lkIDAgOiByZXF1aXJlZFNjb3Blcy5sZW5ndGgpIHtcbiAgICAgICAgY29uc3QgaGFzQWxsU2NvcGVzID0gcmVxdWlyZWRTY29wZXMuZXZlcnkoXG4gICAgICAgICAgKHNjb3BlKSA9PiBhdXRoSW5mby5zY29wZXMuaW5jbHVkZXMoc2NvcGUpXG4gICAgICAgICk7XG4gICAgICAgIGlmICghaGFzQWxsU2NvcGVzKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEluc3VmZmljaWVudFNjb3BlRXJyb3IoXCJJbnN1ZmZpY2llbnQgc2NvcGVcIik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChhdXRoSW5mby5leHBpcmVzQXQgJiYgYXV0aEluZm8uZXhwaXJlc0F0IDwgRGF0ZS5ub3coKSAvIDFlMykge1xuICAgICAgICB0aHJvdyBuZXcgSW52YWxpZFRva2VuRXJyb3IoXCJUb2tlbiBoYXMgZXhwaXJlZFwiKTtcbiAgICAgIH1cbiAgICAgIHJlcS5hdXRoID0gYXV0aEluZm87XG4gICAgICByZXR1cm4gd2l0aEF1dGhDb250ZXh0KGF1dGhJbmZvLCAoKSA9PiBoYW5kbGVyKHJlcSkpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zdCBvcmlnaW4gPSBuZXcgVVJMKHJlcS51cmwpLm9yaWdpbjtcbiAgICAgIGNvbnN0IHJlc291cmNlTWV0YWRhdGFVcmwgPSBgJHtvcmlnaW59JHtyZXNvdXJjZU1ldGFkYXRhUGF0aH1gO1xuICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgSW52YWxpZFRva2VuRXJyb3IpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBSZXNwb25zZShKU09OLnN0cmluZ2lmeShlcnJvci50b1Jlc3BvbnNlT2JqZWN0KCkpLCB7XG4gICAgICAgICAgc3RhdHVzOiA0MDEsXG4gICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgXCJXV1ctQXV0aGVudGljYXRlXCI6IGBCZWFyZXIgZXJyb3I9XCIke2Vycm9yLmVycm9yQ29kZX1cIiwgZXJyb3JfZGVzY3JpcHRpb249XCIke2Vycm9yLm1lc3NhZ2V9XCIsIHJlc291cmNlX21ldGFkYXRhPVwiJHtyZXNvdXJjZU1ldGFkYXRhVXJsfVwiYCxcbiAgICAgICAgICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiXG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSBpZiAoZXJyb3IgaW5zdGFuY2VvZiBJbnN1ZmZpY2llbnRTY29wZUVycm9yKSB7XG4gICAgICAgIHJldHVybiBuZXcgUmVzcG9uc2UoSlNPTi5zdHJpbmdpZnkoZXJyb3IudG9SZXNwb25zZU9iamVjdCgpKSwge1xuICAgICAgICAgIHN0YXR1czogNDAzLFxuICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgIFwiV1dXLUF1dGhlbnRpY2F0ZVwiOiBgQmVhcmVyIGVycm9yPVwiJHtlcnJvci5lcnJvckNvZGV9XCIsIGVycm9yX2Rlc2NyaXB0aW9uPVwiJHtlcnJvci5tZXNzYWdlfVwiLCByZXNvdXJjZV9tZXRhZGF0YT1cIiR7cmVzb3VyY2VNZXRhZGF0YVVybH1cImAsXG4gICAgICAgICAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIlxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2UgaWYgKGVycm9yIGluc3RhbmNlb2YgU2VydmVyRXJyb3IpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBSZXNwb25zZShKU09OLnN0cmluZ2lmeShlcnJvci50b1Jlc3BvbnNlT2JqZWN0KCkpLCB7XG4gICAgICAgICAgc3RhdHVzOiA1MDAsXG4gICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCJcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIlVuZXhwZWN0ZWQgZXJyb3IgYXV0aGVudGljYXRpbmcgYmVhcmVyIHRva2VuOlwiLCBlcnJvcik7XG4gICAgICAgIGNvbnN0IHNlcnZlckVycm9yID0gbmV3IFNlcnZlckVycm9yKFwiSW50ZXJuYWwgU2VydmVyIEVycm9yXCIpO1xuICAgICAgICByZXR1cm4gbmV3IFJlc3BvbnNlKEpTT04uc3RyaW5naWZ5KHNlcnZlckVycm9yLnRvUmVzcG9uc2VPYmplY3QoKSksIHtcbiAgICAgICAgICBzdGF0dXM6IDUwMCxcbiAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIlxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbn1cblxuZXhwb3J0IHsgd2l0aE1jcEF1dGggYXMgZXhwZXJpbWVudGFsX3dpdGhNY3BBdXRoIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1vdXQuanMubWFwXG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5tanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@vercel/mcp-adapter/dist/index.mjs\n");

/***/ })

};
;